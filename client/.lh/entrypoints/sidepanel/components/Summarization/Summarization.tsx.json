{
    "sourceFile": "entrypoints/sidepanel/components/Summarization/Summarization.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1709797439459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1709797544735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n       <Header heading={ModuleNames.SUMMERIZATION} handleCopyClick={handleCopyClick} isSummery={true}/>\n       {/* Add content for Summarization */}\n       {/* font size should be user customizable */}\n       <div className='h-80 mt-5 px-5 text-base overflow-y-scroll'>\n-        <button onClick={handleSummaryClick}>Summarize Page</button>  \n+        <button className='h-20 mt-5 bg-indigo-700 text-white' onClick={handleSummaryClick}>Summarize Page</button>  \n         <p className='font-kanit w-full'>\n           { summery }\n         </p>\n       </div>\n"
                },
                {
                    "date": 1709797610436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,12 @@\n     clipboardCopy(summary);\n     toast.success('Copied to Clipboard', { position: 'top-center', autoClose: 500, hideProgressBar: true, pauseOnHover: false });\n   }\n \n-  const handleSummaryClick = ()=>{\n+  async function handleSummaryClick(){\n     if(localStorage.getItem(\"textContent\") != null){\n       let textContent = localStorage.getItem(\"textContent\")\n-      getAbstractSummary(textContent)\n+      await getAbstractSummary(textContent)\n     }\n   }\n \n   return (\n"
                },
                {
                    "date": 1709797644007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n   }\n \n   async function handleSummaryClick(){\n     if(localStorage.getItem(\"textContent\") != null){\n+      console.log(\"generating\")\n       let textContent = localStorage.getItem(\"textContent\")\n       await getAbstractSummary(textContent)\n     }\n   }\n"
                },
                {
                    "date": 1709798331555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,11 @@\n       console.log(\"generating\")\n       let textContent = localStorage.getItem(\"textContent\")\n       await getAbstractSummary(textContent)\n     }\n+    else{\n+      console.log(\"No Text found\")\n+    }\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1709799532264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import clipboardCopy from 'clipboard-copy';\n import { toast } from 'react-toastify';\n import 'react-toastify/dist/ReactToastify.css';\n import getAbstractSummary from '../../services/summarization-service/abstractSummary';\n+import browser from 'webextension-polyfill';\n \n const Summarization: React.FC = () => {\n \n   const summery: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n@@ -17,11 +18,11 @@\n     toast.success('Copied to Clipboard', { position: 'top-center', autoClose: 500, hideProgressBar: true, pauseOnHover: false });\n   }\n \n   async function handleSummaryClick(){\n-    if(localStorage.getItem(\"textContent\") != null){\n+    if(browser.storage.local.get('textContent') != null){\n       console.log(\"generating\")\n-      let textContent = localStorage.getItem(\"textContent\")\n+      let textContent = browser.storage.local.get('textContent')\n       await getAbstractSummary(textContent)\n     }\n     else{\n       console.log(\"No Text found\")\n"
                },
                {
                    "date": 1709799722594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,16 +18,17 @@\n     toast.success('Copied to Clipboard', { position: 'top-center', autoClose: 500, hideProgressBar: true, pauseOnHover: false });\n   }\n \n   async function handleSummaryClick(){\n-    if(browser.storage.local.get('textContent') != null){\n-      console.log(\"generating\")\n-      let textContent = browser.storage.local.get('textContent')\n-      await getAbstractSummary(textContent)\n-    }\n-    else{\n-      console.log(\"No Text found\")\n-    }\n+    console.log(browser.storage.local.get('textContent'))\n+    // if(browser.storage.local.get('textContent') != null){\n+    //   console.log(\"generating\")\n+    //   let textContent = browser.storage.local.get('textContent')\n+    //   await getAbstractSummary(textContent)\n+    // }\n+    // else{\n+    //   console.log(\"No Text found\")\n+    // }\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1709799849038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,14 @@\n   }\n \n   async function handleSummaryClick(){\n     console.log(browser.storage.local.get('textContent'))\n+    let text = await browser.storage.local.get('textContent');\n+    if(text){\n+      console.log(text)\n+    } else{\n+      console.log('No')\n+    }\n     // if(browser.storage.local.get('textContent') != null){\n     //   console.log(\"generating\")\n     //   let textContent = browser.storage.local.get('textContent')\n     //   await getAbstractSummary(textContent)\n"
                },
                {
                    "date": 1709799993120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,24 +17,23 @@\n     clipboardCopy(summary);\n     toast.success('Copied to Clipboard', { position: 'top-center', autoClose: 500, hideProgressBar: true, pauseOnHover: false });\n   }\n \n-  async function handleSummaryClick(){\n-    console.log(browser.storage.local.get('textContent'))\n-    let text = await browser.storage.local.get('textContent');\n-    if(text){\n-      console.log(text)\n-    } else{\n-      console.log('No')\n+  async function handleSummaryClick() {\n+    try {\n+      const storageData = await browser.storage.local.get('textContent');\n+      const textContent = storageData.textContent;\n+  \n+      if (textContent) {\n+        console.log('Text content found:', textContent);\n+        // Call the function to generate summary\n+        await getAbstractSummary(textContent);\n+      } else {\n+        console.log('No text content found');\n+      }\n+    } catch (error) {\n+      console.error('Error occurred while retrieving text content:', error);\n     }\n-    // if(browser.storage.local.get('textContent') != null){\n-    //   console.log(\"generating\")\n-    //   let textContent = browser.storage.local.get('textContent')\n-    //   await getAbstractSummary(textContent)\n-    // }\n-    // else{\n-    //   console.log(\"No Text found\")\n-    // }\n   }\n \n   return (\n     <div>\n"
                },
                {
                    "date": 1709891976210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n import browser from 'webextension-polyfill';\n \n const Summarization: React.FC = () => {\n \n-  const summery: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n-  const [summary, setSummery] = useState<string>(summery)\n+  const initialSummary: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n+  const [summary, setSummary] = useState<string>(initialSummary)\n \n   const handleCopyClick = () => {\n     clipboardCopy(summary);\n     toast.success('Copied to Clipboard', { position: 'top-center', autoClose: 500, hideProgressBar: true, pauseOnHover: false });\n@@ -25,9 +25,18 @@\n   \n       if (textContent) {\n         console.log('Text content found:', textContent);\n         // Call the function to generate summary\n-        await getAbstractSummary(textContent);\n+        let result = await getAbstractSummary(textContent);\n+        let text = '';\n+        for await (const chunk of result.stream) {\n+          const chunkText = chunk.text();\n+          console.log(chunkText);\n+          text += chunkText;\n+          setSummary(text)\n+        }\n+        const response = await result.response;\n+        const textResp = response.text();\n       } else {\n         console.log('No text content found');\n       }\n     } catch (error) {\n"
                },
                {
                    "date": 1709891991283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n       {/* font size should be user customizable */}\n       <div className='h-80 mt-5 px-5 text-base overflow-y-scroll'>\n         <button className='h-20 mt-5 bg-indigo-700 text-white' onClick={handleSummaryClick}>Summarize Page</button>  \n         <p className='font-kanit w-full'>\n-          { summery }\n+          { summary }\n         </p>\n       </div>\n       \n     </div>\n"
                },
                {
                    "date": 1709892310677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n       if (textContent) {\n         console.log('Text content found:', textContent);\n         // Call the function to generate summary\n         let result = await getAbstractSummary(textContent);\n+        console.log(result)\n         let text = '';\n         for await (const chunk of result.stream) {\n           const chunkText = chunk.text();\n           console.log(chunkText);\n"
                },
                {
                    "date": 1709892429041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n import browser from 'webextension-polyfill';\n \n const Summarization: React.FC = () => {\n \n-  const initialSummary: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n-  const [summary, setSummary] = useState<string>(initialSummary)\n+  const summery: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n+  const [summary, setSummery] = useState<string>(summery)\n \n   const handleCopyClick = () => {\n     clipboardCopy(summary);\n     toast.success('Copied to Clipboard', { position: 'top-center', autoClose: 500, hideProgressBar: true, pauseOnHover: false });\n@@ -25,19 +25,9 @@\n   \n       if (textContent) {\n         console.log('Text content found:', textContent);\n         // Call the function to generate summary\n-        let result = await getAbstractSummary(textContent);\n-        console.log(result)\n-        let text = '';\n-        for await (const chunk of result.stream) {\n-          const chunkText = chunk.text();\n-          console.log(chunkText);\n-          text += chunkText;\n-          setSummary(text)\n-        }\n-        const response = await result.response;\n-        const textResp = response.text();\n+        await getAbstractSummary(textContent);\n       } else {\n         console.log('No text content found');\n       }\n     } catch (error) {\n@@ -52,9 +42,9 @@\n       {/* font size should be user customizable */}\n       <div className='h-80 mt-5 px-5 text-base overflow-y-scroll'>\n         <button className='h-20 mt-5 bg-indigo-700 text-white' onClick={handleSummaryClick}>Summarize Page</button>  \n         <p className='font-kanit w-full'>\n-          { summary }\n+          { summery }\n         </p>\n       </div>\n       \n     </div>\n"
                },
                {
                    "date": 1709892586219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,21 +4,42 @@\n import ModuleNames from '../../constants/Modules';\n import clipboardCopy from 'clipboard-copy';\n import { toast } from 'react-toastify';\n import 'react-toastify/dist/ReactToastify.css';\n-import getAbstractSummary from '../../services/summarization-service/abstractSummary';\n+// import getAbstractSummary from '../../services/summarization-service/abstractSummary';\n import browser from 'webextension-polyfill';\n+import { GoogleGenerativeAI } from \"@google/generative-ai\";\n \n const Summarization: React.FC = () => {\n \n   const summery: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n   const [summary, setSummery] = useState<string>(summery)\n+  const genAI = new GoogleGenerativeAI('AIzaSyBDEMB0-yQNWw1JbA5dt74aujGfjSBn9Lo');\n \n   const handleCopyClick = () => {\n     clipboardCopy(summary);\n     toast.success('Copied to Clipboard', { position: 'top-center', autoClose: 500, hideProgressBar: true, pauseOnHover: false });\n   }\n \n+  async function getAbstractSummary(textContent:any) {\n+    // For text-only input, use the gemini-pro model\n+    const model = genAI.getGenerativeModel({ model: \"gemini-pro\"});\n+  \n+    const prompt = textContent + \" \\n Summarize this webpage using the above text content scraped from the page\"\n+  \n+    const result = await model.generateContentStream(prompt);\n+    let text = '';\n+    for await (const chunk of result.stream) {\n+      const chunkText = chunk.text();\n+      console.log(chunkText);\n+      text += chunkText;\n+      setSummery(text)\n+    }\n+    const response = await result.response;\n+    const textResp = response.text();\n+    return response\n+  }\n+\n   async function handleSummaryClick() {\n     try {\n       const storageData = await browser.storage.local.get('textContent');\n       const textContent = storageData.textContent;\n"
                },
                {
                    "date": 1709893227257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,13 +11,14 @@\n \n const Summarization: React.FC = () => {\n \n   const summery: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n-  const [summary, setSummery] = useState<string>(summery)\n+  const [summaryChunks, setSummaryChunks] = useState<string[]>([]); // State to store summary chunks\n   const genAI = new GoogleGenerativeAI('AIzaSyBDEMB0-yQNWw1JbA5dt74aujGfjSBn9Lo');\n \n   const handleCopyClick = () => {\n-    clipboardCopy(summary);\n+    const summaryText = summaryChunks.join(''); // Concatenate all chunks\n+    clipboardCopy(summaryText);\n     toast.success('Copied to Clipboard', { position: 'top-center', autoClose: 500, hideProgressBar: true, pauseOnHover: false });\n   }\n \n   async function getAbstractSummary(textContent:any) {\n@@ -26,18 +27,15 @@\n   \n     const prompt = textContent + \" \\n Summarize this webpage using the above text content scraped from the page\"\n   \n     const result = await model.generateContentStream(prompt);\n-    let text = '';\n+    // Listen for chunks and update state\n+    const chunks: string[] = [];\n     for await (const chunk of result.stream) {\n-      const chunkText = chunk.text();\n-      console.log(chunkText);\n-      text += chunkText;\n-      setSummery(text)\n+      const chunkText = await chunk.text();\n+      chunks.push(chunkText);\n+      setSummaryChunks([...chunks]);\n     }\n-    const response = await result.response;\n-    const textResp = response.text();\n-    return response\n   }\n \n   async function handleSummaryClick() {\n     try {\n@@ -63,9 +61,11 @@\n       {/* font size should be user customizable */}\n       <div className='h-80 mt-5 px-5 text-base overflow-y-scroll'>\n         <button className='h-20 mt-5 bg-indigo-700 text-white' onClick={handleSummaryClick}>Summarize Page</button>  \n         <p className='font-kanit w-full'>\n-          { summery }\n+          {summaryChunks.map((chunk, index) => (\n+            <span key={index}>{chunk}</span> // Render each chunk\n+          ))}\n         </p>\n       </div>\n       \n     </div>\n"
                },
                {
                    "date": 1709893299575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     <div>\n       <Header heading={ModuleNames.SUMMERIZATION} handleCopyClick={handleCopyClick} isSummery={true}/>\n       {/* Add content for Summarization */}\n       {/* font size should be user customizable */}\n-      <div className='h-80 mt-5 px-5 text-base overflow-y-scroll'>\n+      <div className='h-auto mt-5 px-5 text-base overflow-y-scroll'>\n         <button className='h-20 mt-5 bg-indigo-700 text-white' onClick={handleSummaryClick}>Summarize Page</button>  \n         <p className='font-kanit w-full'>\n           {summaryChunks.map((chunk, index) => (\n             <span key={index}>{chunk}</span> // Render each chunk\n"
                },
                {
                    "date": 1709893441359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n       <Header heading={ModuleNames.SUMMERIZATION} handleCopyClick={handleCopyClick} isSummery={true}/>\n       {/* Add content for Summarization */}\n       {/* font size should be user customizable */}\n       <div className='h-auto mt-5 px-5 text-base overflow-y-scroll'>\n-        <button className='h-20 mt-5 bg-indigo-700 text-white' onClick={handleSummaryClick}>Summarize Page</button>  \n+        <button className='h-12 mt-5 bg-indigo-700 text-white' onClick={handleSummaryClick}>Summarize Page</button>  \n         <p className='font-kanit w-full'>\n           {summaryChunks.map((chunk, index) => (\n             <span key={index}>{chunk}</span> // Render each chunk\n           ))}\n"
                },
                {
                    "date": 1709893498292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,12 @@\n import ModuleNames from '../../constants/Modules';\n import clipboardCopy from 'clipboard-copy';\n import { toast } from 'react-toastify';\n import 'react-toastify/dist/ReactToastify.css';\n-// import getAbstractSummary from '../../services/summarization-service/abstractSummary';\n import browser from 'webextension-polyfill';\n import { GoogleGenerativeAI } from \"@google/generative-ai\";\n+import { faRotate } from \"@fortawesome/free-solid-svg-icons\";\n+import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n \n const Summarization: React.FC = () => {\n \n   const summery: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n@@ -59,9 +60,12 @@\n       <Header heading={ModuleNames.SUMMERIZATION} handleCopyClick={handleCopyClick} isSummery={true}/>\n       {/* Add content for Summarization */}\n       {/* font size should be user customizable */}\n       <div className='h-auto mt-5 px-5 text-base overflow-y-scroll'>\n-        <button className='h-12 mt-5 bg-indigo-700 text-white' onClick={handleSummaryClick}>Summarize Page</button>  \n+      <button className=\"p-2 h-7 inline-flex gap-3 items-center rounded-lg bg-primary text-white\">\n+                        <span>Regenerate</span>\n+                        <FontAwesomeIcon icon={faRotate} />\n+                    </button> \n         <p className='font-kanit w-full'>\n           {summaryChunks.map((chunk, index) => (\n             <span key={index}>{chunk}</span> // Render each chunk\n           ))}\n"
                },
                {
                    "date": 1709893514667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n       {/* Add content for Summarization */}\n       {/* font size should be user customizable */}\n       <div className='h-auto mt-5 px-5 text-base overflow-y-scroll'>\n       <button className=\"p-2 h-7 inline-flex gap-3 items-center rounded-lg bg-primary text-white\">\n-                        <span>Regenerate</span>\n+                        <span>Get Summary</span>\n                         <FontAwesomeIcon icon={faRotate} />\n                     </button> \n         <p className='font-kanit w-full'>\n           {summaryChunks.map((chunk, index) => (\n"
                },
                {
                    "date": 1709893770882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,12 +60,12 @@\n       <Header heading={ModuleNames.SUMMERIZATION} handleCopyClick={handleCopyClick} isSummery={true}/>\n       {/* Add content for Summarization */}\n       {/* font size should be user customizable */}\n       <div className='h-auto mt-5 px-5 text-base overflow-y-scroll'>\n-      <button className=\"p-2 h-7 inline-flex gap-3 items-center rounded-lg bg-primary text-white\">\n-                        <span>Get Summary</span>\n-                        <FontAwesomeIcon icon={faRotate} />\n-                    </button> \n+        <button onClick={handleSummaryClick} className=\"p-2 h-7 inline-flex gap-3 items-center rounded-lg bg-primary text-white\">\n+            <span>Get Summary</span>\n+            <FontAwesomeIcon icon={faRotate} />\n+        </button> \n         <p className='font-kanit w-full'>\n           {summaryChunks.map((chunk, index) => (\n             <span key={index}>{chunk}</span> // Render each chunk\n           ))}\n"
                },
                {
                    "date": 1709893969027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n // OptionScreens/SummarizationScreen.tsx\n-import React, { useState } from 'react';\n+import React, { useState, useEffect } from 'react';\n import Header from '../shared/Header';\n import ModuleNames from '../../constants/Modules';\n import clipboardCopy from 'clipboard-copy';\n import { toast } from 'react-toastify';\n@@ -54,8 +54,22 @@\n       console.error('Error occurred while retrieving text content:', error);\n     }\n   }\n \n+  useEffect(() => {\n+    const typingSpeed = 50; // Adjust typing speed (characters per second)\n+    let currentIndex = 0;\n+    const interval = setInterval(() => {\n+      if (currentIndex < summaryChunks.length) {\n+        setSummaryChunks(prevChunks => prevChunks.slice(0, currentIndex + 1)); // Render one more chunk\n+        currentIndex++;\n+      } else {\n+        clearInterval(interval); // Stop the interval when all chunks are rendered\n+      }\n+    }, typingSpeed);\n+    return () => clearInterval(interval); // Clean up on component unmount\n+  }, [summaryChunks]);\n+\n   return (\n     <div>\n       <Header heading={ModuleNames.SUMMERIZATION} handleCopyClick={handleCopyClick} isSummery={true}/>\n       {/* Add content for Summarization */}\n"
                },
                {
                    "date": 1709893998895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n // OptionScreens/SummarizationScreen.tsx\n-import React, { useState, useEffect } from 'react';\n+import React, { useState } from 'react';\n import Header from '../shared/Header';\n import ModuleNames from '../../constants/Modules';\n import clipboardCopy from 'clipboard-copy';\n import { toast } from 'react-toastify';\n@@ -54,21 +54,9 @@\n       console.error('Error occurred while retrieving text content:', error);\n     }\n   }\n \n-  useEffect(() => {\n-    const typingSpeed = 50; // Adjust typing speed (characters per second)\n-    let currentIndex = 0;\n-    const interval = setInterval(() => {\n-      if (currentIndex < summaryChunks.length) {\n-        setSummaryChunks(prevChunks => prevChunks.slice(0, currentIndex + 1)); // Render one more chunk\n-        currentIndex++;\n-      } else {\n-        clearInterval(interval); // Stop the interval when all chunks are rendered\n-      }\n-    }, typingSpeed);\n-    return () => clearInterval(interval); // Clean up on component unmount\n-  }, [summaryChunks]);\n+  \n \n   return (\n     <div>\n       <Header heading={ModuleNames.SUMMERIZATION} handleCopyClick={handleCopyClick} isSummery={true}/>\n"
                },
                {
                    "date": 1709894091773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   async function getAbstractSummary(textContent:any) {\n     // For text-only input, use the gemini-pro model\n     const model = genAI.getGenerativeModel({ model: \"gemini-pro\"});\n   \n-    const prompt = textContent + \" \\n Summarize this webpage using the above text content scraped from the page\"\n+    const prompt = textContent + \" \\n Analyze the given text content from the webpage and give me an abstract summary of this webpage with what this webpage is about\"\n   \n     const result = await model.generateContentStream(prompt);\n     // Listen for chunks and update state\n     const chunks: string[] = [];\n"
                },
                {
                    "date": 1709894541636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n const Summarization: React.FC = () => {\n \n   const summery: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n   const [summaryChunks, setSummaryChunks] = useState<string[]>([]); // State to store summary chunks\n+  const [typing, setTyping] = useState<boolean>(false); // State to control typing animation\n   const genAI = new GoogleGenerativeAI('AIzaSyBDEMB0-yQNWw1JbA5dt74aujGfjSBn9Lo');\n \n   const handleCopyClick = () => {\n     const summaryText = summaryChunks.join(''); // Concatenate all chunks\n@@ -35,17 +36,19 @@\n       const chunkText = await chunk.text();\n       chunks.push(chunkText);\n       setSummaryChunks([...chunks]);\n     }\n+    setTyping(false)\n   }\n \n   async function handleSummaryClick() {\n     try {\n       const storageData = await browser.storage.local.get('textContent');\n       const textContent = storageData.textContent;\n   \n       if (textContent) {\n-        console.log('Text content found:', textContent);\n+        setTyping(true)\n+        console.log('Text content found:');\n         // Call the function to generate summary\n         await getAbstractSummary(textContent);\n       } else {\n         console.log('No text content found');\n@@ -68,9 +71,12 @@\n             <FontAwesomeIcon icon={faRotate} />\n         </button> \n         <p className='font-kanit w-full'>\n           {summaryChunks.map((chunk, index) => (\n-            <span key={index}>{chunk}</span> // Render each chunk\n+            <span key={index}>\n+              {chunk}\n+              {index === summaryChunks.length - 1 && typing && <span className=\"animate-pulse inline-block h-4 w-4 bg-black mx-2 rounded-full\"></span>}\n+            </span> // Render each chunk with typing animation for the last chunk\n           ))}\n         </p>\n       </div>\n       \n"
                },
                {
                    "date": 1709894812079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n   }\n \n   async function handleSummaryClick() {\n     try {\n+      setSummaryChunks(['Generating...'])\n       const storageData = await browser.storage.local.get('textContent');\n       const textContent = storageData.textContent;\n   \n       if (textContent) {\n"
                },
                {
                    "date": 1709896766415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n       const textContent = storageData.textContent;\n   \n       if (textContent) {\n         setTyping(true)\n-        console.log('Text content found:');\n+        console.log('Text content found:\\n' + textContent);\n         // Call the function to generate summary\n         await getAbstractSummary(textContent);\n       } else {\n         console.log('No text content found');\n"
                }
            ],
            "date": 1709797439459,
            "name": "Commit-0",
            "content": "// OptionScreens/SummarizationScreen.tsx\nimport React, { useState } from 'react';\nimport Header from '../shared/Header';\nimport ModuleNames from '../../constants/Modules';\nimport clipboardCopy from 'clipboard-copy';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport getAbstractSummary from '../../services/summarization-service/abstractSummary';\n\nconst Summarization: React.FC = () => {\n\n  const summery: string = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur faucibus dui quam, id auctor lacus dapibus at. Ut tincidunt lorem eget risus rutrum aliquam. Nulla egestas, lectus ac eleifend eleifend, eros nisl efficitur justo, ac fringilla diam metus sit amet neque. Maecenas suscipit lectus eget aliquam facilisis. Aliquam eget iaculis tellus, iaculis vestibulum metus. Mauris sit amet massa nec mauris congue convallis. Suspendisse varius ex et nibh ultrices molestie. Praesent quis tellus imperdiet, semper quam a, tempor libero. Vivamus quis pulvinar ex. Nullam eget auctor sapien, a mattis purus. Fusce convallis nulla sed lacinia malesuada. Sed accumsan in sem sit.';\n  const [summary, setSummery] = useState<string>(summery)\n\n  const handleCopyClick = () => {\n    clipboardCopy(summary);\n    toast.success('Copied to Clipboard', { position: 'top-center', autoClose: 500, hideProgressBar: true, pauseOnHover: false });\n  }\n\n  const handleSummaryClick = ()=>{\n    if(localStorage.getItem(\"textContent\") != null){\n      let textContent = localStorage.getItem(\"textContent\")\n      getAbstractSummary(textContent)\n    }\n  }\n\n  return (\n    <div>\n      <Header heading={ModuleNames.SUMMERIZATION} handleCopyClick={handleCopyClick} isSummery={true}/>\n      {/* Add content for Summarization */}\n      {/* font size should be user customizable */}\n      <div className='h-80 mt-5 px-5 text-base overflow-y-scroll'>\n        <button onClick={handleSummaryClick}>Summarize Page</button>  \n        <p className='font-kanit w-full'>\n          { summery }\n        </p>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default Summarization;\n"
        }
    ]
}